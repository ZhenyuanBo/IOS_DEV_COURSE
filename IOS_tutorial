1. 'Single View App' is not available in Xcode12 any more, choose 'App' instead
2. interface builder - press control and connect the image to point where we want to define the 
IBOutlet
3. Button Type - "Touch Up Inside": user's finger is positioned within the boundary of the Button
4. String concatenation:
let a = "Hello"
let b = "World"

let first = a + ", " + b
let second = "\(a), \(b)"

You could also do:

var c = "Hello"
c += ", World"

5. if a variable's value is not mutated, we can use 'let' instead; let keywords set a constant value
6. double can hold more decimals than float
7. range operator
    1). inclusive range operator: Int.random(in: lower ... upper)
    2). exclude upper: Int.random(in: lower ..< upper)

8. add constraint and alignment
9. Autolayout
    1. group views into stack views
    2. add constraints to it (relative to safe area)
    3. alignment - set to fill
    4. distribution - set to fill equally
    5. spacing set to 1 
    6. we can also set superview to bottom

10. function signature

func myFunction(parameter: DataType){

}

11. var myAge: Int = 3
    var myAge: String = "Three"

12 optional

var hardness: String? - optional DataType
it can store a string or can be Nil (empty data)

var player1Username: String = nil 
this gives an error because variable expects a string value

correction:

var player1Username: String? = nil

player1Username = "jackbauerisawesome"

print(player1Username) ---> Optional("jackbauerisawesome")

to remove Optional, we can add "!"

when we get a value out from a dictionary using the key, the value is optional. we need to unwrap it if it is not a null value

13. MVC - Model View Controller

14. external/internal parameter

    func checkAnswer(answer userAnswer: String){
        let actualAnswer = quiz[questionNumber].answer
    }

    answer ->> external
    userAnswer ->> internal

OR: we do not need to define external parameter name

func checkAnswer(_ userAnswer: String){}


func myFunc(exname eman: Type){
    print(eman)
}

when calling function:

we can do myFunc(exname: val)

or we can do

myFunc(val) ---> but, this needs exname changed to '_'

so func signature will be:

func myFunc(_ eman: Type){

}

15. struct is immutable

Note: for the variables defined using 'var' keyword, if we mutate the value within the struct itself, an error of immutability will be thrown out; however, if we mutate the value outside of the struct, we will be allowed to do so.

16. when self is created from the background, all the properties created are actually defined using 'let' keyword. Thus, self iself 
is immutable

17. mutating function can only be called by a mutable object, which is defined using 'var' keyword. If this object is defined using 'let' keyword, mutating function can't be invoked by a immutable object (defined using 'let')

18. struct vs. class

let skeleton2 = skeleton1 this is copied by reference
both skeleton2 and skeleton1 are pointing to the same object

struct: create another copy so that it is separated from the original object

structs are passed by value 
classes are passed by reference

19. use struct by default

when you need inheritance, you can use class

struct: immutable

class: passed by reference, can inherit from other classes

20. use segue to connect from controller view to another view

we use cocoa touch class to create controller class - set subclass UIViewController


21. Working with Optional

1. Force Unwrapping

we need to really think if the value could be a nil value when we wrap it, if it is a nil value and we unwrap it, an error will probably occur


2. check for nil value

if optional != nil {
    optional!
}

3. optional binding

if let safeOptional = optional{
    safeOptional
}

we can bind the value of optional to the new safeOptional if it is not a nil value
and we can work with the safeOptional

example:

let myOptional: String?

myOptional = "Angela"

if let safeOptional = myOptional{
    let text: String = safeOptional
    print(safeOptional)
}else{
    print("myOptional was found to be nil")
}

if myOptional is a nil value, then else clause will be executed; otherwise, 
if clause will be executed if it is a non-nil value

4. Nil Coalescing operator

optional ?? defaultValue

let myOptional: String?

myOptional = nil

let text: String = myOptional ?? "I am the default" 

if it is a nil value, then the default value will be assigned to text


5. Optional chaining

optional?.property ---> if optional is not a nil, then we can access the property
optional?,method() ----> if optional is not a nil, then we can access the method


struct MyOptional{
    var property = 123

    func method(){
        print("I am the struct's method.")
    }
}

let myOptional: MyOptional?

myOptional = nil

print(myOptional?.property)  

myOptional = MyOptional()

print(myOptional?.method()) ----> since myOptional is not a nil value, method will be triggered


22. add color asset
1). click on Assets.xcasset 
2). click on '+' Button
3). set any appearance color to the color selected using the color picker

23. change the background image based on the user's Model

using vector image:
1). drag pdf image to assets.xcassets and set it to 1x background
2). check preserve vector on the right side menu
3). select single scale for the scales


24. Protocols

protocol MyProtocol{
    //define requirements; consider protocol like a certification
}

adopting the protocol
struct MyStruct: MyProtocol{}

class MyClass: MyProtocol{}

class Bird{
    var is Female = true

    func layEgg(){
        if isFemale{
            print("The bird makes a new bird in a shell.")
        }
    }
    func fly(){
        print("The bird flaps its wings and lifts off into the sky.")
    }
}

class Eagle: Bird{


    func soar(){
        print("The eagle glides in the air using air curents.")
    }
}

let myEagle = Eagle()
myEagle.fly()
myEagle.layEgg()
myEagle.soar()


class Penguin: Bird{
    func swim(){
        print("The penguin paddles through the water.")
    }
}


let myPenguin = Penguin()
myPenguin.layEgg()
myPenGuin.swim()
myPenguin.fly() // penguin actually can't fly -- problem

**********************************************************************
we don't want penguin inherit some functionality that they should have
**********************************************************************

struct FlyMuseum{
    func flyingDemo(FlyingObject: Bird){
        flyingObject.fly()
    }
}

let museum = FlyMuseum()
museum.flyingDemo(flyingObject: myEagle)
museum.flyingDemo(flyingObject: myPenguin) // this is not intended behavior

class Airplane: Bird{
    override func fly(){
        print("The airplane uses its engine to lift off into the air.")
    }
}

let myPlane = Airplane()
myPlane.layEgg() ----> doesn't make any sense

struct can't inherit!!!


//every one has the capability to fly

protocol CanFly{
    func fly() ---> protocol methods must not have bodies
}

class Eagle: Bird, CanFly{
    func soar(){

    }
    

    //implement the fly method
    func fly(){
        print("The bird flaps its wings and lifts off into the sky.")
    }
}

Penguin can't fly, so it doesn't need to implement fly() method

//protocols can be adopted by struct or class
struct Airplane: CanFly{
    func fly(){
        print("The airplen uses its engine to lift off into the air.")
    }
}

struct FlyingMusuem{
    //can use protocol as the data type
    //all the objects that adopt this protocol must have fly() method
    func flyingDemo(flyingObject: CanFly){
        flyingObject.fly()
    }
}

myEagle.fly()
myPlane.fly()

musuem.flyingDemo(flyingObject: myPlane)
musuem.flyingDemo(flyingObject: myEagle)
//can't do this:
musuem.flyingDemo(flyingObject: myPenguin)

you can adopt multiple protocols

struct MyStructure: FirstProtcol, SecondProtocol{

}

class MyClass: SuperClass, FirstProcol, AnotherProtcol{

}


25. Delegate Design Pattern


1). we need text field to notify the WeatherViewController when the 
editing activity takes place
2). UITextField can't know the identity of future classes --> this comes the Delegate
design Pattern

in order for a class to have the type UITextFieldDelegate, the class has to adopt it

3). let textField = UITextField()

textField.delegate = self //assign textField's delegate to the class itself

whenever a change is made to the text field, this delegate will be notified, which means 

class will be notified

sequence of events:

1). create textField  let textField = UITextField()
2). textField.delegate = self

in UITextField

var delegate: UITextFieldDelegate 

so, delegate is now pointing to self, which is pointing to the WeatherViewController
we can do this because WeatherViewController adopts UITextFieldDelegate

3). if textfield detecs user's activity, it will trigger: delegate.textFieldDidBeginEditing()

which indirectly triggers textFieldDidBeginEditing defined in the WeatherViewController


26 Example:

protocol AdvancedLifeSupport{
    func performCPR()
}

class EmergencyCallHandler{
    var delegate: AdvancedLifeSupport?

    func assessSituation(){

    }

    func medicalEmergency(){
        delegate?.performCPR()
    }
}


struct Paramedic: AdvancedLifeSupport{

    init(handler: EmergencyCallHandler){
        handler.delegate = self
    }

    func performCPR(){
        print("The paramedic does chest compressions, 30 per second.")
    }
}


let emillio = EmergencyCallHandler()
let pete = Paramedic(handler: emilio)

emilio.assessSituation()

emilio.medicalEmergency() ---> pete.performCPR() will be triggered 

Example 2:

class Doctor: AdvancedLifeSupport{
    init(handler: EmergencyCallHandler){
        handler.delegate = self
    }

    func performCPR(){
        print("The doctor does chest compressions, 30 per second.")
    }

    func useStethescope(){
        print("Listening for heard sounds")
    }
}

//automatically adopt AdvancedLifeSupport protocol
class Surgeon: Doctor{
    override func performCPR(){
        super.performCPR()
        print()
    }

    func useElectricDrill(){

    }
}

let angela = Surgeon(handler: emilio)


28. common networking error: the resource could not be loaded because the App Transport
Security policy requires the use of a secure connection

resolution: http---> https


29. closures

pass function as an input

func calculator(n1: Int, n2: Int)->Int{
    return n1*n2
}

func add(no1: Int, no2: Int)->Int{
    return n1+n2
}

func calculator(n1: Int, n2: Int, operation: (Int, Int)->Int)->Int{
    return operation(n1, n2)
}

calculator(n1: 2, n2: 3, operation: add)

//add function is parsed as an argument

closures
calculator(n1: 2, n2: 3, operation: {(no1, no2) in no1*no2})

OR

calculator(n1: 2, n2: 3, operation: {$0 * $1})

OR 

trailing closure: 

calculator(n1: 2, n2: 3) {$0 * $1}


let array = [6, 2, 3, 9, 4, 1]

func addOne(n1: Int)->Int{
    return n1+1
}

{(n1)->in n1+1}

array.map(addOne)

array.map({(n1)->in n1+1})

==

array.map({$0+1})

==

array.map{$0+1}

Another example:

array.map{"\($0)"}


30. computed property

var aProperty: Int{
    //have to provide an output

    return 2+5 // this is computation
}

31 codable --> type alias for Decoddable & Encodable

32 update UI from a completion handler

we need to dispatch the call to update the label text to the main thread in the background

33. extensions and default implementation for protocols


extension type{

}

extend existing data type

extension Double {
    func round(to places: Int)->Double{
        let precisionNumber = pow(10, Double(places))
        var n = self
        n = n * precisionNumber
        n.round()
        n = n/precisionNumber
        return n
    }
}


var myDouble = 3.14159

myDouble = myDouble * 1000
myDouble.round()
myDouble = myDouble / 1000



extension UIBUtton{
    func makeCircular(){
        self.clipsToBounds = true
        self.layer.cornerRadius = self.frame.size.width/2
    }
}


extension SomeProtocol{
    //define default behavior

}

//default implementation 
extension CanFly(){
    func fly(){
        print("The object takes off into the air.")
    }
}

whenever a protocol is adopted, this method will be automatically called. 
we don't need to provide an implementation of this method any more

[locations] ----> locations.last ---> retrieve the last element of an array

we use .last to retrieve

31. segues 

detailed explanation of segues can be found in lecture 187

32 Set data type: 

let fruits: Set = ["Apple", "Pear", "Orange"]

order in this case doesn't matter

let fruits: Array=["Apple", "Pear", "Orange"]

order does matter in Array

let contacts = ["Adam": 123456789, "James": 987654321, "Amy": 912837365]

for person in contacts{
    print(person.key)
}

for fruit in fruits{
    print(fruit)
}

let closedRange = 1...5

//we can let the code run number of times
for _ in closedRange{
    print("Loop is running")
}


while loops

while somethingIsTrue{
    print("Hello")
}

32. pod related commands

pod install

pod update (to update all the dependencies)

pod 'Firebase/Auth'

33. differences between segues
https://stackoverflow.com/questions/25966215/whats-the-difference-between-all-the-selection-segues


34. command:

command + b -> build
shift + command + k ---> clean your project

35 Casting as？as! as is and Understand any

Type casting:


class Animal{
    var name: String
    init(n: String){
        name = n
    }
}

class Human: Animal{
    func code(){
        print("Typing away...")
    }
}

class Fish: Animal{
    func breatheUnderWater(){
        print("Breathing under water.")
    }
}

let angela = Human(n: "Angela Yu")

let jack = Human(n: "Jack Bauer")

let nemo = Fish(n: "Nemo")

let neighbours = [angela, jack, nemo]

neighbours [Animal]

neighbours[0] ---> Animal class

if neighbours[0] is Human{
    print("this is a human")
}

is: check a certain object is of a certain data type

func findNemo(from animals: [Animal]){
    for animal in animals{
        if animal is Fish{
            print(animal.name)
            let fish = animal as! Fish        //as! is downcasting
            fish.breatheUnderWater()
        }
    }
}

findNemo(from: neighbours)


let messageCell = cell as! MessageCell ---> turn into subclass forced downcasting

run time error: 

let fish = neighbours[1] as! Fish

let fish = neighbours[1] as? Fish ---> optional casting

fish?.breatheUnderWater ?--> optional chaining: if fish is not a nil, then call the method


as upcasting      --- cast subclass to SuperClass
let animalFish = fish as Animal

let num = 12

if we add num into the neighbours array:

let neighbours = [angela, jack, nemo, num] --- this is wrong 

let neighbours: [Any] = [angela, jack, nemo, num] --- this is correct 

let neighbours: [AnyObject] = [angela, jack, nemo, num]

cannot convert value of ty[e 'Fish' to expected element type 'AnyObject' because 

AnyObject requires all members come from class

let neighbours: [NSObject] = [angela, jack, nemo] ---- this is wrong as they are not type NSObject


let num: NSNumber = 12
let word: NSString = "abc"

let neighbours: [NSObject] = [num, word] -- this will work


35. 

1. viewDidLoad()

2. viewWillAppear() ---> its the good time point to hide and show something

3. viewDidAppear() ------> view is already on screen

4. viewWillDisappear() ----> stop animation

5. viewDidDisappear() ---> view is already off screen

storyboard segue:

kind: present modally
presentation: full screen

covers the previous screen entirely


segue knowledge article:
https://stackoverflow.com/questions/37823521/prepareforsegue-and-performseguewithidentifier-sender

36. 

application life cycle

scenedelegate.swift --> saves user's data before scene enters background 


37. 

ls -a includes all hidden files

control + E to the end of the command Line 

control + A to the beginning of the command Line

38. 

touch text2.txt ----- create a files

mkdir ----- create a directory

specify which application you want to open your file in
open -a Atom Text2.txt  

delete file

rm Text.rtf ---- remove a file

remove all files

rm *

remove a directory  ----> rm -r Angela/    

39. 

Swift UI:

ignore safe area: use modifier edgesIgnoringSafeArea

info list: 1). configure the setting for your project, for example font 2). in Clima Project, we added 
privacy - allow in use 


to put an element into a vstak, hold on the command key and hover on the element and select embed in vstack

frame modifier change the size

if we want to change the color of shape, or text we can use foregroundcolor modifier

when using sf symbol, we need to use system name in Image()

use resiable() to change the image size

use padding() to leave margin ---- this is done through modifier


*********************
named colors
*********************
this is covered in the clima module


'@State' var leftDiceNumber allows variables in the struct to be changed

@State wrapper to update properties in swiftui


40
IMPORTANT!!!!!
to decode json api data, we need to create a structure to represent the data sent back

in swiftUI, we need to conform our data manager class to a protocol called
observerable

the data that needs to be published must have @Published in the front

all listeners will listen to the data being published

in listener, we will have @ObservedObject for the property

check H4XOR NEWS object

use import WebKit for WebView


41 Git and GitHub

open a text file: open chapter1.txt

initialize git: git init (when we do git init, the directory becomes working directory)

add file to the staging area:(pick which file in the working directory that you want to commit)

git status check unchecked files

git add add files to the staging area

git commit -m "message" message by convention should be written in present tense

git log 

git add . (add everything in this current directory)

after commit, files are located in the .git (local repository)

check the differences between versions:

git diff filename (e.g. git diff chapter3.txt)

git checkout filename ---> roll back to the saved last version 

create a remote repo 

git remote add origin (origin is the name of the remote)

git push -u origin master

add DS file to the git ignore file

remove files from staging area command:

git rm --cached -r . (. refers to the current working directory)

we can use "#" to make comments in .gitignore file

****************
Note
****************
ALL secret key, api key, .DS_Store shoud be included in git ignore file


Git Cloning

git clone URL 

we need to change bundle/team in cloned project in order to run on our own device

create a new branch:

git branch branch_name

list out all branches created:

git branch

* shows the current branch you are currently on

switch to a particular branch:

git checkout branch_name


merge branch command:

git merge (sub_branch_name)

to pull the content from the sub_branch, we need to be in the branch where we are going to do the 
pulling

1. create new pull request 
2. merge pull requests

create remote from Xcode
1. add github account
2. right click on the project and select new remote and create


Forking:

when you fork a git repo, you now have the full ownership and permission to the remote repository

if the work is done and if your teammates want to merge some changes from the forked remote repo
into your repo, they need to submit a pull request

if a pull request is approved, then merge changes into the main remote repo

42 Navigation Controller

1. click on controller icon
2. click on editor -> embed in -> navigation 

navigation bar background:

1. click on navigation bar
2. click on bar tint to set background color

43. persists data

UserDefault

let defaults = UserDefaults.standard
defaults.set(0.24, forKey:"Volume")
defaults.set(true, forKey: "MusicOn")
defaults.set("Angela", forKey: "PlayerName")
defaults.set(Date(), forKey: "AppLastOpenedByUser")

let appLastOpen = defaults.object(forKey: "AppLastOpenedByUser")


defaults.array()
defaults.dictionary()

persists data if it is just a small amount of data

DON'T USE DEFAULTS TO SAVE Array

singleton: always point to the same object, same file across multiple classes

UserDefaults can't store an array of user-defined custom objects

Alternative: 
1. save data to persist storage (a data file) using NSencode and NSdecode ---> codable (preverable on small bits of information)
2. SQLite
3. Core Data - object-oriented database
4. Realm - open source framework -- popular persisting data locally on device



lazy keyword: lazy variable only occupy memory when it is needed

NSPersistentContainer: SQLite Database

we perform CRUD in Context, instead of having direct contact with SQLite


44. dynamic variable - make the variable to be monitored during the run time

if user makes a change to the variable, it allows realm to dynamically update data in the database

let array = [Int]()
let array: [Int] = [1, 2, 3]
let array: Array<Int> = [1,2,3]


45. objects in Realm are set to be auto-updating because of dynamic keyword



