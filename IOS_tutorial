1. 'Single View App' is not available in Xcode12 any more, choose 'App' instead
2. interface builder - press control and connect the image to point where we want to define the 
IBOutlet
3. Button Type - "Touch Up Inside": user's finger is positioned within the boundary of the Button
4. String concatenation:
let a = "Hello"
let b = "World"

let first = a + ", " + b
let second = "\(a), \(b)"

You could also do:

var c = "Hello"
c += ", World"

5. if a variable's value is not mutated, we can use 'let' instead; let keywords set a constant value
6. double can hold more decimals than float
7. range operator
    1). inclusive range operator: Int.random(in: lower ... upper)
    2). exclude upper: Int.random(in: lower ..< upper)

8. add constraint and alignment
9. Autolayout
    1. group views into stack views
    2. add constraints to it (relative to safe area)
    3. alignment - set to fill
    4. distribution - set to fill equally
    5. spacing set to 1 
    6. we can also set superview to bottom

10. function signature

func myFunction(parameter: DataType){

}

11. var myAge: Int = 3
    var myAge: String = "Three"

12 optional

var hardness: String? - optional DataType
it can store a string or can be Nil (empty data)

var player1Username: String = nil 
this gives an error because variable expects a string value

correction:

var player1Username: String? = nil

player1Username = "jackbauerisawesome"

print(player1Username) ---> Optional("jackbauerisawesome")

to remove Optional, we can add "!"

when we get a value out from a dictionary using the key, the value is optional. we need to unwrap it if it is not a null value

13. MVC - Model View Controller

14. external/internal parameter

    func checkAnswer(answer userAnswer: String){
        let actualAnswer = quiz[questionNumber].answer
    }

OR: we do not need to define external parameter name

func checkAnswer(_ userAnswer: String){}

15. struct is immutable

Note: for the variables defined using 'var' keyword, if we mutate the value within the struct itself, an error of immutability will be thrown out; however, if we mutate the value outside of the struct, we will be allowed to do so.

16. when self is created from the background, all the properties created are actually defined using 'let' keyword. Thus, self iself 
is immutable

17. mutating function can only be called by a mutable object, which is defined using 'var' keyword. If this object is defined using 'let' keyword, mutating function can't be invoked by a immutable object (defined using 'let')

18. struct vs. class

let skeleton2 = skeleton1 this is copied by reference
both skeleton2 and skeleton1 are pointing to the same object

struct: create another copy so that it is separated from the original object

structs are passed by value 
classes are passed by reference

19. use struct by default

when you need inheritance, you can use class

struct: immutable

class: passed by reference, can inherit from other classes

20. use segue to connect from controller view to another view


